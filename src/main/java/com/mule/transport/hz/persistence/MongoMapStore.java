package com.mule.transport.hz.persistence;import com.hazelcast.core.HazelcastInstance;import com.hazelcast.core.MapLoaderLifecycleSupport;import com.hazelcast.core.MapStore;import com.hazelcast.spring.mongodb.MongoDBConverter;import com.hazelcast.spring.mongodb.SpringMongoDBConverter;import com.mongodb.*;import org.springframework.data.mongodb.core.MongoTemplate;import java.util.*;import java.util.logging.Level;import java.util.logging.Logger;/*  This Class is for storing the collection in mongo */public class MongoMapStore implements MapStore, MapLoaderLifecycleSupport {    private String mapName;    private MongoDBConverter converter;    private DBCollection coll;    private MongoTemplate mongoTemplate;    protected static final Logger logger = Logger.getLogger(MongoMapStore.class.getName());    public MongoTemplate getMongoTemplate() {        return mongoTemplate;    }    public void setMongoTemplate(MongoTemplate mongoTemplate) {        this.mongoTemplate = mongoTemplate;    }    /**     *  Stores the element in collection from HazelCast Queue with MAP as backup reference     *  queue.offer() , queue.put()     *  @see com.hazelcast.core.MapStore#store(java.lang.Object, java.lang.Object)     **/    public void store(Object key, Object value) {        DBObject dbo = converter.toDBObject(value);        dbo.put("_id", key);        coll.save(dbo);    }    /**     *     * Store entire backup map form  queue     * @see com.hazelcast.core.MapStore#storeAll(java.util.Map)     **/    public void storeAll(Map map) {        for (Object key : map.keySet()) {            store(key, map.get(key));        }    }    /**     * renoves the element from the queue when queue.poll() and queue.take() is called     * @see com.hazelcast.core.MapStore#delete(java.lang.Object)     **/    public void delete(Object key) {        DBObject dbo = new BasicDBObject();        dbo.put("_id", key);        coll.remove(dbo);    }    /**     * remove the all the element from database when queue.drainTo is called     * @see com.hazelcast.core.MapStore#deleteAll(java.util.Collection)     **/    public void deleteAll(Collection keys) {        BasicDBList dbo = new BasicDBList();        for (Object key : keys) {            dbo.add(new BasicDBObject("_id", key));        }        BasicDBObject dbb = new BasicDBObject("$or", dbo);        coll.remove(dbb);    }    /**     * load the single element from the database it wont be uasefull     * @see com.hazelcast.core.MapLoader#load(java.lang.Object)     */    public Object load(Object key) {        DBObject dbo = new BasicDBObject();        dbo.put("_id", key);        DBObject obj = coll.findOne(dbo);        if (obj == null)            return null;        try {            Class clazz = Class.forName(obj.get("_class").toString());            return converter.toObject(clazz, obj);        } catch (ClassNotFoundException e) {            logger.log(Level.WARNING, e.getMessage(), e);        }        return null;    }    /**     * load all the given elements from the database to queue     * @see com.hazelcast.core.MapLoader#loadAll(java.util.Collection)     **/    public Map loadAll(Collection keys) {        Map map = new HashMap();        BasicDBList dbo = new BasicDBList();        for (Object key : keys) {            dbo.add(new BasicDBObject("_id", key));        }        BasicDBObject dbb = new BasicDBObject("$or", dbo);        DBCursor cursor = coll.find(dbb);        while (cursor.hasNext()) {            try {                DBObject obj = cursor.next();                Class clazz = null;                clazz = Class.forName(obj.get("_class").toString());                map.put(obj.get("_id"), converter.toObject(clazz, obj));            } catch (ClassNotFoundException e) {                logger.log(Level.WARNING, e.getMessage(), e);            }        }        return map;    }    /**     * load all the  elements from the database to queue     * @see com.hazelcast.core.MapLoader#loadAllKeys()     */    public Set loadAllKeys() {        Set keyset = new HashSet();        BasicDBList dbo = new BasicDBList();        dbo.add("_id");        DBCursor cursor = coll.find(null, dbo);        while (cursor.hasNext()) {            keyset.add(cursor.next().get("_id"));        }        return keyset;    }    /*     * Initialize the Hazelcast Instance and MongoTemplate     * @see com.hazelcast.core.MapLoader#loadAllKeys()     */    public void init(HazelcastInstance hazelcastInstance, Properties properties, String mapName) {        if (properties.get("collection") != null) {            this.mapName = (String) properties.get("collection");        } else {            this.mapName = mapName;        }        this.coll = mongoTemplate.getCollection(this.mapName);        this.converter = new SpringMongoDBConverter(mongoTemplate);    }    public void destroy() {    }}